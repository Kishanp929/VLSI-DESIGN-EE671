
--and gate
library IEEE;
use IEEE.std_logic_1164.all;
entity andgate is
port (A, B: in std_ulogic;
prod: out std_ulogic);
end entity andgate;
architecture trivial of andgate is
begin
prod <= A AND B AFTER 380 ps;
end architecture trivial;

--xor gate
library IEEE;
use IEEE.std_logic_1164.all;
entity xorgate is
port (A, B: in std_ulogic;
uneq: out std_ulogic);
end entity xorgate;
architecture trivial of xorgate is
begin
uneq <= A XOR B AFTER 760 ps;
end architecture trivial;

--abc gate a+b.c
library IEEE;
use IEEE.std_logic_1164.all;
entity abcgate is
port (A, B, C: in std_ulogic;
abc: out std_ulogic);
end entity abcgate;
architecture trivial of abcgate is
begin
abc <= A OR (B AND C) AFTER 480 ps;
end architecture trivial;

-- A.B + C.(A+B) with a trivial architecture
library IEEE;
use IEEE.std_logic_1164.all;
entity Cin_map_G is
port(A, B, Cin: in std_ulogic;
Bit0_G: out std_ulogic);
end entity Cin_map_G;
architecture trivial of Cin_map_G is
begin
Bit0_G <= (A AND B) OR (Cin AND (A OR B)) AFTER 760 ps;
end architecture trivial;

--Half Adder--
library IEEE;
use IEEE.std_logic_1164.all;
entity ha is
    port(
        a,b: in std_logic;
        s, c: out std_logic
    );
end entity;
architecture behave of ha is
    component andgate is
        port (A, B: in std_logic;
        prod: out std_logic);
    end component;

    component xorgate is
        port (A, B: in std_logic;
        uneq: out std_logic);
    end component xorgate;
begin
    a1: andgate port map(a => a, b => b, prod => c);
    x1: xorgate port map(a => a, b => b, uneq => s);
end behave;

--Full Adder--
library IEEE;
use IEEE.std_logic_1164.all;
entity fa is 
     port(
        a,b,cin: in std_logic;
        s,cout: out std_logic
    );
end entity;

architecture behave of fa is
    component andgate is
        port (A, B: in std_logic;
        prod: out std_logic);
    end component;

    component xorgate is
        port (A, B: in std_logic;
        uneq: out std_logic);
    end component xorgate;

    component Cin_map_G is
        port(A, B, Cin: in std_logic;
        Bit0_G: out std_logic);
    end component Cin_map_G;

    signal t1: std_logic;
begin
    g1: Cin_map_G port map(cin => cin, a => a, b => b, bit0_g => cout);
    x1: xorgate port map(a => a, b => b, uneq => t1);
    x2: xorgate port map(a => t1, b => cin, uneq => s);
end behave;

--MAC
library IEEE;
use IEEE.std_logic_1164.all;
entity MAC is 
    port(
        a, b: in std_logic_vector(15 downto 0);
        c: in std_logic_vector(31 downto 0);
        s: out std_logic_vector(31 downto 0);
        cout: out std_logic
    );
end entity;
architecture behave of MAC is

    -- component declarations --
    component andgate is
        port (a, b: in std_logic;
        prod: out std_logic);
    end component;

    component fa is 
        port(
            a,b,cin: in std_logic;
            s,cout: out std_logic
        );
    end component;

    component ha is
        port(
            a,b: in std_logic;
            s, c: out std_logic
        );
    end component;

    component BK_Add is
        port(A, B: in std_ulogic_vector(31 downto 0);
    Cin: in std_ulogic;
    Sum: out std_ulogic_vector(31 downto 0);
    Cout: out std_ulogic);
    end component;

    -- LOW signal for carry in of Brent Kung Adder--
    signal gnd_sig: std_logic := '0';

    -- layer 1 signal declarations--
    -- we make rows corresponding to the first layer--
    signal layer1_r1: std_logic_vector(31 downto 0);
	 signal layer1_r2: std_logic_vector(15 downto 0);
    signal layer1_r3: std_logic_vector(16 downto 1);
    signal layer1_r4: std_logic_vector(17 downto 2);
    signal layer1_r5: std_logic_vector(18 downto 3);
    signal layer1_r6: std_logic_vector(19 downto 4);
    signal layer1_r7: std_logic_vector(20 downto 5);
    signal layer1_r8: std_logic_vector(21 downto 6);
    signal layer1_r9: std_logic_vector(22 downto 7);
    signal layer1_r10: std_logic_vector(23 downto 8);
    signal layer1_r11: std_logic_vector(24 downto 9);
    signal layer1_r12: std_logic_vector(25 downto 10);
    signal layer1_r13: std_logic_vector(26 downto 11);
    signal layer1_r14: std_logic_vector(27 downto 12);
    signal layer1_r15: std_logic_vector(28 downto 13);
    signal layer1_r16: std_logic_vector(29 downto 14);
    signal layer1_r17: std_logic_vector(30 downto 15);


    -- signals for connections--
    signal wires: std_logic_vector(83 downto 0);
    
    -- first argument (top row of final layer)--
    signal arg1: std_logic_vector(31 downto 0);
    -- second argument (bottom row of final layer)--
    signal arg2: std_logic_vector(31 downto 0);

begin
    -- set first row as 31 bit sum--
    layer1_r1 <= c;

    -- evaluate 1st matrix i.e a_i.b_j-- 
    a0: for i in 0 to 15 generate
        and_i: andgate port map(a => b(i), b => a(0), prod => layer1_r2(i)); 
    end generate a0;

    a1: for i in 0 to 15 generate
        and_i: andgate port map(a => b(i), b => a(1), prod => layer1_r3(i + 1)); 
    end generate a1;

    a2: for i in 0 to 15 generate
        and_i: andgate port map(a => b(i), b => a(2), prod => layer1_r4(i + 2)); 
    end generate a2;

    a3: for i in 0 to 15 generate
        and_i: andgate port map(a => b(i), b => a(3), prod => layer1_r5(i + 3)); 
    end generate a3;
    
    a4: for i in 0 to 15 generate
        and_i: andgate port map(a => b(i), b => a(4), prod => layer1_r6(i + 4)); 
    end generate a4;

    a5: for i in 0 to 15 generate
        and_i: andgate port map(a => b(i), b => a(5), prod => layer1_r7(i + 5)); 
    end generate a5;
    
    a6: for i in 0 to 15 generate
        and_i: andgate port map(a => b(i), b => a(6), prod => layer1_r8(i + 6)); 
    end generate a6;
    
    a7: for i in 0 to 15 generate
        and_i: andgate port map(a => b(i), b => a(7), prod => layer1_r9(i + 7)); 
    end generate a7;
	 
	 a8: for i in 0 to 15 generate
        and_i: andgate port map(a => b(i), b => a(8), prod => layer1_r10(i + 8)); 
    end generate a8;
	 
	 a9: for i in 0 to 15 generate
        and_i: andgate port map(a => b(i), b => a(9), prod => layer1_r11(i + 9)); 
    end generate a9;
	 
	 a10: for i in 0 to 15 generate
        and_i: andgate port map(a => b(i), b => a(10), prod => layer1_r12(i + 10)); 
    end generate a10;
	 
	 a11: for i in 0 to 15 generate
        and_i: andgate port map(a => b(i), b => a(11), prod => layer1_r13(i + 11)); 
    end generate a11;
	 
	 a12: for i in 0 to 15 generate
        and_i: andgate port map(a => b(i), b => a(12), prod => layer1_r14(i + 12)); 
    end generate a12;
	 
	 a13: for i in 0 to 15 generate
        and_i: andgate port map(a => b(i), b => a(13), prod => layer1_r15(i + 13)); 
    end generate a8;
	 
	 a14: for i in 0 to 15 generate
        and_i: andgate port map(a => b(i), b => a(14), prod => layer1_r16(i + 14)); 
    end generate a8;
	 
	 a15: for i in 0 to 15 generate
        and_i: andgate port map(a => b(i), b => a(15), prod => layer1_r17(i + 15)); 
    end generate a8;
	 


    -- connections are made column wise as per the diagram--

    --column 0--
    arg1(0) <= layer1_r1(0);
    arg2(0) <= layer1_r2(0);
    
    --column 1--
    h1: ha port map(a => layer1_r1(1), b => layer1_r2(1), s => arg1(1), c => arg2(2));
    arg2(1) <= layer1_r3(1);
    
    --column 2--
    h2: ha port map(a => layer1_r1(2), b => layer1_r2(2), s => wires(0), c => wires(1));
    f1: fa port map(a => wires(0), b => layer1_r3(2), cin=> layer1_r4(2), s => arg1(2), cout => arg2(3));
    
    --column 3--
    h3: ha port map(a => layer1_r1(3), b => layer1_r2(3), s => wires(2), c => wires(3));
    f2: fa port map(a => wires(2), b => layer1_r3(3), cin => layer1_r4(3), s => wires(4), cout => wires(5));
    f3: fa port map(a => layer1_r5(3), b => wires(1), cin => wires(4), s => arg1(3), cout => arg2(4));
    
    --column 4--
    f4: fa port map(a => layer1_r1(4), b => layer1_r2(4), cin => layer1_r3(4), s => wires(6), cout => wires(7));
    h4: ha port map(a => layer1_r4(4), b => layer1_r5(4), s => wires(8), c => wires(9));
    f5: fa port map(a => wires(6), b => wires(8), cin => wires(3), s => wires(10), cout =>wires(11));
    f6: fa port map(a => wires(10), b => wires(5), cin => layer1_r6(4), s => arg1(4), cout =>arg2(5));
    
    --column 5--
    h5: ha port map(a => layer1_r1(5), b => layer1_r2(5), s =>wires(12), c =>wires(13));
    f7: fa port map(a => wires(12), b => layer1_r3(5), cin => layer1_r4(5), s => wires(14), cout =>wires(15));
    f8: fa port map(a => layer1_r5(5), b => layer1_r6(5), cin => layer1_r7(5), s => wires(16), cout =>wires(17));
    f9: fa port map(a => wires(14), b => wires(16), cin => wires(7), s => wires(18), cout =>wires(19));
    f10: fa port map(a => wires(18), b => wires(9) , cin => wires(11), s => arg1(5), cout => arg2(6));
    
    --column 6--
    f11: fa port map(a => layer1_r1(6), b => layer1_r2(6), cin => layer1_r3(6), s => wires(20), cout => wires(83));
    h6: ha port map(a => layer1_r4(6), b => layer1_r5(6), s =>wires(21), c =>wires(22));
    f12: fa port map(a => wires(20), b => wires(21), cin => wires(13), s => wires(23), cout => wires(24));
    f13: fa port map(a => layer1_r6(6), b => layer1_r7(6), cin => layer1_r8(6), s => wires(25), cout => wires(26));
    f14: fa port map(a => wires(23), b => wires(25), cin => wires(15), s => wires(27), cout => wires(28));
    f15: fa port map(a => wires(27), b => wires(17), cin => wires(19), s => arg1(6), cout => arg2(7));

    --column 7--
    f16: fa port map(a => layer1_r1(7), b => layer1_r2(7), cin => layer1_r3(7), s => wires(29), cout => wires(30));
    f17: fa port map(a => layer1_r4(7), b => layer1_r5(7), cin => layer1_r6(7), s => wires(31), cout => wires(32));
    h7: ha port map(a => layer1_r7(7), b => layer1_r8(7), s => wires(33), c => wires(34));
    f18: fa port map(a=>wires(29), b=>wires(31), cin=>wires(83), s=>wires(35), cout=>wires(36));
    f19: fa port map(a=>wires(33), b=>layer1_r9(7), cin=>wires(22), s=>wires(37), cout=>wires(38));
    f20: fa port map(a=>wires(35), b=>wires(37), cin=>wires(24), s=>wires(39), cout=>wires(40));
    f21: fa port map(a=>wires(39), b=>wires(26), cin=>wires(28), s=>arg1(7), cout=>arg2(8));

    --column 8--
    f22: fa port map(a=>layer1_r1(8), b=>layer1_r3(8), cin=>layer1_r4(8), s=>wires(41), cout=>wires(42));
    f23: fa port map(a=>layer1_r5(8), b=>layer1_r6(8), cin=>layer1_r7(8), s=>wires(43), cout=>wires(44));
    h8: ha port map(a=>layer1_r8(8), b=>layer1_r9(8), s=>wires(45), c=>wires(46));
    f24: fa port map(a=>wires(41), b=>wires(30), cin=>wires(43), s=>wires(47), cout=>wires(48));
    f25: fa port map(a=>wires(45), b=>wires(32), cin=>wires(34), s=>wires(49), cout=>wires(50));
    f26: fa port map(a=>wires(47), b=>wires(49), cin=>wires(36), s=>wires(51), cout=>wires(52));
    f27: fa port map(a=>wires(38), b=>wires(51), cin=>wires(40), s=>arg1(8), cout=>arg2(9));

    --column 9--
    f28: fa port map(a=>layer1_r1(9), b=>layer1_r4(9), cin=>layer1_r5(9), s=>wires(53), cout=>wires(54));
    f29: fa port map(a=>layer1_r6(9), b=>layer1_r7(9), cin=>layer1_r8(9), s=>wires(55), cout=>wires(56));
    f30: fa port map(a=>wires(53), b=>wires(55), cin=>wires(42), s=>wires(57), cout=>wires(58));
    f31: fa port map(a=>layer1_r9(9), b=>wires(44), cin=>wires(46), s=>wires(59), cout=>wires(60));
    f32: fa port map(a=>wires(57), b=>wires(59), cin=>wires(48), s=>wires(61), cout=>wires(62));
    f33: fa port map(a=>wires(50), b=>wires(52), cin=>wires(61), s=>arg1(9), cout=>arg2(10));
    
    --column 10--
    f34: fa port map(a=>layer1_r1(10), b=>layer1_r5(10), cin=>layer1_r6(10), s=>wires(63), cout=>wires(64));
    f35: fa port map(a=>wires(63), b=>layer1_r7(10), cin=>wires(54), s=>wires(65), cout=>wires(66));
    f36: fa port map(a=>wires(56), b=>layer1_r8(10), cin=>layer1_r9(10), s=>wires(67), cout=>wires(68));
    f37: fa port map(a=>wires(65), b=>wires(67), cin=>wires(58), s=>wires(69), cout=>wires(70));
    f38: fa port map(a=>wires(60), b=>wires(62), cin=>wires(69), s=>arg1(10), cout=>arg2(11));

    --column 11--
    f39: fa port map(a=>layer1_r1(11), b=>layer1_r6(11), cin=>wires(64), s=>wires(71), cout=>wires(72));
    f40: fa port map(a=>layer1_r7(11), b=>layer1_r8(11), cin=>layer1_r9(11), s=>wires(73), cout=>wires(74));
    f41: fa port map(a=>wires(71), b=>wires(73), cin=>wires(66), s=>wires(75), cout=>wires(76));
    f42: fa port map(a=>wires(68), b=>wires(70), cin=>wires(75), s=>arg1(11), cout=>arg2(12));

    --column 12--
    f43: fa port map(a=>layer1_r1(12), b=>layer1_r7(12), cin=>layer1_r8(12), s=>wires(77), cout=>wires(78));
    f44: fa port map(a=>layer1_r9(12), b=>wires(77), cin=>wires(72), s=>wires(79), cout=>wires(80));
    f45: fa port map(a=>wires(74), b=>wires(76), cin=>wires(79), s=>arg1(12), cout=>arg2(13));

    --column 13--
    f46: fa port map(a=>layer1_r1(13), b=>layer1_r8(13), cin=>wires(78), s=>wires(81), cout=>wires(82));
    f47: fa port map(a=>layer1_r9(13), b=>wires(80), cin=>wires(81), s=>arg1(13), cout=>arg2(14));

    --column 14--
    f48: fa port map(a=>layer1_r1(14), b=>layer1_r9(14), cin=>wires(82), s=>arg1(14), cout=>arg2(15));

    --column 15--
    arg1(15) <= layer1_r1(15);
	 
	 --column 16--
	 
	 --column 17--
	 
	 --column 18--
	 
	 --column 19--
	 
	 --column 20--
	 
	 --column 21--
	 
	 --column 22--
	 
	 --column 23--
	 
	 --column 24--
	 
	 --column 25--
	 
	 --column 26--
	 
	 --column 27--
	 
	 --column 28--
	 
	 --column 29--
	 
	 --column 30--
	 
	 --column 31--

    
    --final adder to compute arg1 + arg2--
    bkadder: brentkung port map(a =>arg1, b=>arg2, cin=>gnd_sig, s=>s, cout=>cout);

end behave;